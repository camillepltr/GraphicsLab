#version 330 core

struct Light {
    vec3 ambient_colour;
    vec3 diffuse_colour;
    vec3 specular_colour;
    vec3 position;
};

struct Material
{
    float Ka;
    float Kd;
    float Ks;
    float phong_exponent; 
};

out vec4 FragColour;

uniform Light light1;
uniform Light light2;
uniform Material material;
uniform vec4 object_color;
uniform vec3 view_position;
uniform sampler2D texture;

in vec3 vertex_in_world_space;
in vec3 tnorm;
in vec2 text_coord;

vec3 phong(Light light) {
	// Ambiant
	vec3 ambient = material.Ka * light.ambient_colour;

	// Diffuse 
	vec3 norm = normalize(tnorm);
	vec3 light_direction = normalize(light.position - vertex_in_world_space);
	float diff = max(dot(norm, light_direction), 0.0);
	vec3 diffuse = diff * material.Kd * light.diffuse_colour;

	// Specular
	vec3 view_direction = normalize(view_position - vertex_in_world_space);
	vec3 reflect_direction = normalize(reflect(-light_direction, tnorm));
	float spec_dot = max(dot(view_direction, reflect_direction), 0.0);
	float spec = pow(spec_dot, material.phong_exponent);
	vec3 specular = spec * material.Ks * light.specular_colour;

	return (ambient + diffuse + specular);
}

void main(){
	vec3 illumination1 = phong(light1);
	vec3 illumination2 = phong(light2);

	vec4 result = vec4(illumination1 + illumination2, 1.0) * object_color;
	FragColour = texture(texture, text_coord) * result;
}