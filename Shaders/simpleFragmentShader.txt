#version 330 core

out vec4 FragColour;

uniform vec3 object_color;
uniform vec3 light_position;
uniform vec3 view_position;
uniform float specular_coeff;

in vec3 vertex_in_world_space;
in vec3 tnorm;

void main(){
	// Ambiant
	float ambient_strength = 0.1;
	vec3 ambiant_light_color = vec3(0.5, 0.5, 0.5);
	vec3 ambient = ambient_strength * ambiant_light_color;

	// Diffuse 
	vec3 diffuse_light_color = vec3(1.0, 1.0, 1.0);
	vec3 norm = normalize(tnorm);
	vec3 source = light_position;
	vec3 test = light_position;
	vec3 light_direction = normalize(source - vertex_in_world_space);
	float diff = max(dot(norm, light_direction), 0.0);
	vec3 diffuse = diff * diffuse_light_color;

	// Specular
	float spec_strength = 1;
	vec3 specular_light_color = vec3(0.5, 0.5, 0.5);
	vec3 view_direction = normalize(view_position - vertex_in_world_space);
	vec3 reflect_direction = normalize(reflect(light_direction, tnorm));
	float spec_dot = max(dot(view_direction, reflect_direction), 0.0);
	float spec = pow(spec_dot, specular_coeff);
	vec3 specular = spec * spec_strength * specular_light_color;

	vec3 result = (ambient + diffuse + specular) * object_color;
	FragColour = vec4(result, 1.0);
}